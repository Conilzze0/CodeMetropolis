from queue import Empty
import pytest
import subprocess
import os
import shutil
import sys
import argparse
import os.path
from os import path
from os import walk

parser = argparse.ArgumentParser(description=' A program to define the compare between the expected output and fresly generated output of Codemetropolis')

parser.add_argument('pytest_folder', metavar='F', type=str,
                    help='Run all pytest files from the selected folder')      
parser.add_argument('--pytest_file', dest='pytest_file_path', type=str,
                    help='Run one selected pytest file from the selected folder')                
parser.add_argument('input', metavar='I', type=str,
                    help='Selected input file')       
parser.add_argument('expected_output', metavar='E', type=str,
                    help='Selected expected output') 
parser.add_argument('--override', dest='generated_output_path', type=str,
                    help='Override the default path of the output generated by the converter')                

#arguments_and_variables
arguments = parser.parse_args()
argPytestFolder = arguments.pytest_folder
argPytestFile = arguments.pytest_file_path
argInput = arguments.input
argExpectedoutput = arguments.expected_output
pathToPytestFile = argPytestFolder + "/" + str(argPytestFile)
argGeneratedOutputPath = arguments.generated_output_path
generatedOutputPath = "output"

#FUNCTIONS
#WARNINGS_function
def warning(argPytestFolder, argPytestFile, argInput, argExpectedoutput, argGeneratedOutputPath):
    #paths_and files_not_exist
    if (path.exists(argPytestFolder) == False):
        print("Warning: There is no folder with this name or the path is invalid!")
        return -1
    if (str(argPytestFile) != "None" and path.exists(pathToPytestFile) == False):
        print("Warning: There is no pytest file with this name or the path is invalid!")
        return -1
    if (path.exists(argInput) == False):
        print("Warning: There is no file with this name or the path is invalid!")
        return -1
    if (path.exists(argExpectedoutput) == False):
        print("Warning: There is no expected output file with this name or the path is invalid!")
        return -1 
    #directory_empty
    if (len(os.listdir(argPytestFolder)) == 0):
        print("Warning: Directory is empty!")
        return -1
    #no_py_file_in_directory
    directoryFiles = next(walk(argPytestFolder), (None, None, []))[2]
    if (".py" not in str(directoryFiles)):
        print("Warning: No pytests on the selected folder!")
        return -1
    #argGeneratedOutputPath_not_exist
    if (argGeneratedOutputPath != None and path.exists(argGeneratedOutputPath) == False):
        print("Warning: There is no folder with this name or the path is invalid!")
        return -1 

#._splitter_function
def dotSplitter(fileNames):
    fileNamesSplit = fileNames.split('.')
    fileName = fileNamesSplit[0]
    return fileName

#output_folder_check_function
def generatedOutputFolderExist(generatedOutputPath):
    if (os.path.exists(generatedOutputPath) == False):
        os.mkdir(generatedOutputPath)

#import_pytest_file_function
def randomPytestFileSelect(argPytestFolder):
    sys.path.append(os.path.join(os.path.dirname(__file__), argPytestFolder))
    fileNames = next(walk(argPytestFolder), (None, None, []))[2]
    fileName = dotSplitter(fileNames[0])
    return fileName

#run_pytests_function
def runPytests(argPytestFile, argPytestFolder, pathToPytestFile, argExpectedoutput, generatedOutputPath):
    if (argPytestFile == None):
        pytest.main(["-x", argPytestFolder, '--expected', argExpectedoutput, '--output', generatedOutputPath])
        
    if (argPytestFile != None):
        pytest.main(["-x", pathToPytestFile, '--expected', argExpectedoutput, '--output', generatedOutputPath])
    
#jars_functions
#converter_jar_function
def converterJar(argInput, generatedOutputPath):
        subprocess.call(['java.exe', '-jar', '../distro/converter-1.4.0.jar', '-t' ,'sourcemeter', '-s' , '' + argInput]),
        generatedOutputFolderExist(generatedOutputPath)
        shutil.move(os.path.join('./', 'converterToMapping.xml'), os.path.join(generatedOutputPath, 'converterToMapping.xml'))   
           
#mapping_jar_function
def mappingJar(argInput, generatedOutputPath):
    javaPathFile = open("javapath.bat","w")
    javaPathContent = """setlocal 
    SET PATH=C:/Program Files/Java/jre1.8.0_301/bin;%PATH%
    java.exe -jar ../distro/mapping-1.4.0.jar -i """ + argInput + " -m ./sourcemeter_mapping_example.xml"
    javaPathFile.write(javaPathContent)
    javaPathFile.close();
    subprocess.call([r'javapath.bat'])
    #shutil.move("mappingToPlacing.xml", '' + generatedOutputPath)
    generatedOutputFolderExist(generatedOutputPath)
    shutil.move(os.path.join('./', 'mappingToPlacing.xml'), os.path.join(generatedOutputPath, 'mappingToPlacing.xml'))
    os.remove('javapath.bat')

#placing_jar_function
def placingJar(argInput, generatedOutputPath):
    subprocess.call(['java.exe', '-jar', '../distro/placing-1.4.0.jar', '-i', '' + argInput])
    #shutil.move("placingToRendering.xml", '' + generatedOutputPath)
    generatedOutputFolderExist(generatedOutputPath)
    shutil.move(os.path.join('./', 'placingToRendering.xml'), os.path.join(generatedOutputPath, 'placingToRendering.xml'))

#rendering_jar_function
def renderingJar(argInput, generatedOutputPath):
    subprocess.call(['java.exe', '-jar', '../distro/rendering-1.4.0.jar', '-i', '' + argInput, '-world', 'world'])
    worldExist = os.path.exists(generatedOutputPath)
    if (worldExist == True):
        shutil.rmtree(generatedOutputPath)  
    #shutil.move("world", '' + generatedOutputPath)
    generatedOutputFolderExist(generatedOutputPath)
    shutil.move(os.path.join('./', 'world'), os.path.join(generatedOutputPath, 'world'))

#MAIN
while True:
    #warnings
    if (warning(argPytestFolder, argPytestFile, argInput, argExpectedoutput, argGeneratedOutputPath) == -1):
        break

    #default_generated_output_path_override
    if (argGeneratedOutputPath != None):
        generatedOutputPath = argGeneratedOutputPath

    #import_pytest_file
    if (str(argPytestFile) != "None"):
        sys.path.append(os.path.join(os.path.dirname(__file__), argPytestFolder))
        importPytestFile = __import__(dotSplitter(argPytestFile))
    if (str(argPytestFile) == "None"):
        importPytestFile = __import__(randomPytestFileSelect(argPytestFolder))

    #Converter_jars_runner
    selectedJar = importPytestFile.jar

    #converter
    if('converter' in selectedJar):
        converterJar(argInput, generatedOutputPath)
        runPytests(argPytestFile, argPytestFolder, pathToPytestFile, argExpectedoutput, generatedOutputPath)

    #mapping
    if('mapping' in selectedJar):
        mappingJar(argInput, generatedOutputPath)
        runPytests(argPytestFile, argPytestFolder, pathToPytestFile, argExpectedoutput, generatedOutputPath)
    
    #placing
    if('placing' in selectedJar):
        placingJar(argInput, generatedOutputPath)
        runPytests(argPytestFile, argPytestFolder, pathToPytestFile, argExpectedoutput, generatedOutputPath)

    #rendering
    if('rendering' in selectedJar):
        renderingJar(argInput, generatedOutputPath)
        runPytests(argPytestFile, argPytestFolder, pathToPytestFile, argExpectedoutput, generatedOutputPath)
    break




